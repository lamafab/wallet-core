syntax = "proto3";

package TW.Lightning.Proto;
option java_package = "wallet.core.jni.proto";

message ReceivePaymentRequest {
    ReceivePaymentParams payment_request = 1;
    bytes blob_lsp_info = 2;
    bytes blob_node_peers = 3;
    uint64 node_state_inbound_liquidity = 4;
}

message ReceivePaymentParams {
    // The amount in satoshis for this payment request
    uint64 amount_msat = 1;
    // The description for this payment request.
    string description = 2;
    // (Optional) preimage for this payment request. / If specified, it will be
    //used instead of generating a new one.
    bytes preimage = 3;
    // (Optional) if set and valid, these fess options are used when a new
    //channels is needed. / Otherwise the default fee options will be used.
    OpeningFeeParams opening_fee_params = 4;
    // (Optional) if set to true, then the bolt11 invoice returned includes the
    //description hash.
    bool use_description_hash = 5;
    // (Optional) if specified, set the time the invoice is valid for, in
    //seconds.
    uint32 expiry = 6;
    // (Optional) if specified, sets the min_final_cltv_expiry for the invoice
    uint32 cltv = 7;
}

message OpeningFeeParams {
    // The minimum value in millisatoshi we will require for incoming HTLCs on
    // the channel
    uint64 min_msat = 1;
    // The fee in ppm charged over liquidity when buying a channel
    uint32 proportional = 2;
    // The date and time this opening fee params promise expires, in RFC 3339 / ISO 8601 format
    string valid_until = 3;
    // The channel can be closed if not used within this duration in blocks
    uint32 max_idle_time = 4;
    uint32 max_client_to_self_delay = 5;
    string promise = 6;
}

message ReceivePaymentContext {
    string lsp_id = 1;
    string lsp_pubkey = 2;
    uint64 short_channel_id = 3;
    uint64 destination_invoice_amount_msat = 4;
    // (Optional)
    OpeningFeeParams channel_opening_fee_params = 5;
    bool open_channel_needed = 6;
    // (Optional)
    uint64 channel_fees_msat = 7;
}

message ReceivePaymentCheckLspHints {
    bytes private_key = 1;
    string invoice  = 2;
    ReceivePaymentParams payment_request = 3;
    ReceivePaymentContext context = 4;
    bytes proto_lsp_info = 5;
}

message ReceivePaymentCheckRegistration {
    string invoice = 1;
    ReceivePaymentParams payment_request = 2;
    ReceivePaymentContext context = 3;
}

message SignedInvoiceWithLspHint {
    string invoice = 1;
}

message SendPaymentRequest {
    // The bolt11 invoice
    string bolt11 = 1;
    // (Optional) the amount to pay in millisatoshis (1 sat = 1_000 msat). This
    // should only be set when `bolt11` is a zero-amount invoice.
    uint64 amount_msat = 2;
}

// The parameters required for the `/cln.Node/Invoice` endpoint.
message InvoiceParams {
    uint64 destination_invoice_amount_msat = 1;
    string description = 2;
    // (Optional)
    bytes preimage = 3;
    // (Optional)
    bool use_description_hash = 4;
    // (Optional)
    uint32 expiry = 5;
    // (Optional)
    int32 cltv  = 6;
}

message LspPaymentRegistrationParams {
    string lsp_id = 1;
    string lsp_pubkey = 2;
    bytes payment_hash = 3;
    bytes payment_secret = 4;
    bytes destination = 5;
    int64 incoming_amount_msat = 6;
    int64 outgoing_amount_msat = 7;
    // (Optional)
    OpeningFeeParams opening_fee_params = 8;
}

// TODO: Is this needed?
message LnInvoice {
    message RouteHint {
        message RouteHintHop {
            /// The node_id of the non-target end of the route
            string src_node_id = 1;
            /// The short_channel_id of this channel
            uint64 short_channel_id = 2;
            /// The fees which must be paid to use this channel
            uint32 fees_base_msat = 3;
            uint32 fees_proportional_millionths = 4;
            /// The difference in CLTV values between this node and the next node.
            uint64 cltv_expiry_delta = 5;
            /// (Optional) The minimum value, in msat, which must be relayed to the next hop.
            uint64 htlc_minimum_msat = 6;
            /// (Optional) The maximum value in msat available for routing with a single HTLC.
            uint64 htlc_maximum_msat = 7;
        }

        repeated RouteHintHop hops = 1;
    }

    string bolt11 = 1;
    string payee_pubkey = 2;
    string payment_hash = 3;
    // (Optional)
    string description = 4;
    // (Optional)
    string description_hash = 5;
    // (Optional)
    uint64 amount_msat = 6;
    uint64 timestamp = 7;
    uint64 expirty = 8;
    repeated RouteHint route_hints = 9;
    bytes payment_secret = 10;
    uint64 min_final_cltv_expirty_delta = 11;
}
